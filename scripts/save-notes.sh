#!/bin/bash

# save-notes.sh - Save meeting notes to daily markdown files

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Get session ID
if [[ $# -lt 1 ]]; then
    echo "Usage: save-notes.sh <session_id>"
    exit 1
fi

SESSION_ID="$1"
TODAY=$(date +%Y-%m-%d)
NOTES_DIR="$PROJECT_DIR/notes"
DAILY_NOTES_FILE="$NOTES_DIR/$TODAY.md"
SUMMARY_FILE="$PROJECT_DIR/transcripts/${SESSION_ID}_summary.md"
LOG_FILE="$PROJECT_DIR/logs/${SESSION_ID}.log"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

log "Saving notes for session: $SESSION_ID"

# Create notes directory if it doesn't exist
mkdir -p "$NOTES_DIR"

# Check if summary file exists
if [[ ! -f "$SUMMARY_FILE" ]]; then
    log "Warning: Summary file not found: $SUMMARY_FILE"
    # Create basic entry without summary
    MEETING_TIME=$(date +%H:%M)
    BASIC_ENTRY="## $MEETING_TIME Meeting (Session: $SESSION_ID)

**Files:**
- Audio: \`recordings/${SESSION_ID}.wav\`
- Transcript: \`transcripts/${SESSION_ID}.txt\`

*Summary not available - check log files for processing errors.*

---
"
    
    # Add to daily notes
    if [[ -f "$DAILY_NOTES_FILE" ]]; then
        echo "" >> "$DAILY_NOTES_FILE"
        echo "$BASIC_ENTRY" >> "$DAILY_NOTES_FILE"
    else
        echo "# Meeting Notes - $TODAY" > "$DAILY_NOTES_FILE"
        echo "" >> "$DAILY_NOTES_FILE"
        echo "$BASIC_ENTRY" >> "$DAILY_NOTES_FILE"
    fi
    
    log "Basic entry added to: $DAILY_NOTES_FILE"
    exit 0
fi

# Extract key information from summary
MEETING_TIME=$(date +%H:%M)

# Check if this is a new daily notes file
if [[ ! -f "$DAILY_NOTES_FILE" ]]; then
    log "Creating new daily notes file: $DAILY_NOTES_FILE"
    cat > "$DAILY_NOTES_FILE" << EOF
# Meeting Notes - $TODAY

*Generated by Always-On Transcription Service*

---

EOF
fi

# Add session entry to daily notes
log "Adding session entry to daily notes"

# Create meeting entry header
MEETING_HEADER="## $MEETING_TIME Meeting (Session: $SESSION_ID)"

# Extract sections from summary (skip the metadata header)
SUMMARY_CONTENT=$(tail -n +8 "$SUMMARY_FILE" 2>/dev/null || cat "$SUMMARY_FILE")

# Add to daily notes file
cat >> "$DAILY_NOTES_FILE" << EOF

$MEETING_HEADER

$SUMMARY_CONTENT

**Files:**
- 🎵 Audio: \`recordings/${SESSION_ID}.wav\`
- 📝 Transcript: \`transcripts/${SESSION_ID}.txt\`
- 🔍 Speaker Analysis: \`transcripts/${SESSION_ID}_diarization.json\`
- 📋 Full Summary: \`transcripts/${SESSION_ID}_summary.md\`

---

EOF

log "Meeting notes saved to: $DAILY_NOTES_FILE"

# Create index entry if index file exists or create it
INDEX_FILE="$NOTES_DIR/index.md"

if [[ ! -f "$INDEX_FILE" ]]; then
    log "Creating notes index file"
    cat > "$INDEX_FILE" << EOF
# Meeting Notes Index

*Auto-generated index of all meeting notes*

## Recent Meetings

EOF
fi

# Add entry to index (avoid duplicates)
INDEX_ENTRY="- [$TODAY $MEETING_TIME]($TODAY.md#$(echo "$MEETING_TIME" | tr ':' '-')-meeting-session-$SESSION_ID) - Session: $SESSION_ID"

if ! grep -q "Session: $SESSION_ID" "$INDEX_FILE" 2>/dev/null; then
    # Add to top of recent meetings section
    temp_file=$(mktemp)
    awk '
        /## Recent Meetings/ { 
            print
            print ""
            print "'"$INDEX_ENTRY"'"
            next 
        }
        { print }
    ' "$INDEX_FILE" > "$temp_file"
    mv "$temp_file" "$INDEX_FILE"
    log "Added entry to index file"
fi

# Update statistics
TOTAL_SESSIONS=$(find "$PROJECT_DIR/recordings" -name "*.wav" 2>/dev/null | wc -l | tr -d ' ')
TOTAL_NOTES=$(find "$NOTES_DIR" -name "*.md" ! -name "index.md" 2>/dev/null | wc -l | tr -d ' ')

# Update index footer
temp_file=$(mktemp)
awk '
    BEGIN { in_stats = 0 }
    /## Statistics/ { in_stats = 1 }
    /^---$/ && in_stats { in_stats = 0; next }
    !in_stats { print }
    END {
        print ""
        print "## Statistics"
        print ""
        print "- **Total Sessions**: '"$TOTAL_SESSIONS"'"
        print "- **Total Daily Notes**: '"$TOTAL_NOTES"'"
        print "- **Last Updated**: '"$(date '+%Y-%m-%d %H:%M:%S')"'"
        print ""
        print "---"
        print "*Generated by Always-On Transcription Service*"
    }
' "$INDEX_FILE" > "$temp_file"
mv "$temp_file" "$INDEX_FILE"

# Create monthly summary if it's a new month
MONTH_FILE="$NOTES_DIR/$(date +%Y-%m)-summary.md"
if [[ ! -f "$MONTH_FILE" ]]; then
    log "Creating monthly summary file"
    cat > "$MONTH_FILE" << EOF
# $(date +%B\ %Y) Meeting Summary

## Monthly Overview

*This file will be updated with key themes and insights from meetings this month.*

## Key Meetings This Month

EOF
fi

# Add today's entry to monthly summary if not already present
MONTH_ENTRY="- **$TODAY**: [View Notes]($TODAY.md) - $TOTAL_SESSIONS sessions today"
if ! grep -q "$TODAY" "$MONTH_FILE" 2>/dev/null; then
    echo "$MONTH_ENTRY" >> "$MONTH_FILE"
fi

log "Notes processing completed"
log "Daily notes: $DAILY_NOTES_FILE"
log "Index updated: $INDEX_FILE"

# Optional: Open notes in default editor (uncomment if desired)
# open "$DAILY_NOTES_FILE"

# Send completion notification
osascript -e "display notification \"Meeting notes saved to $TODAY.md\" with title \"Transcription Service\"" 2>/dev/null || true
